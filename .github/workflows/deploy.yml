name: CI/CD Customer Service (verbose)

on:
  push:
    branches: [main, master]

env:
  AWS_REGION: us-east-1
  ECR_REPO:  customer-service
  # â€”â€”â€” secrets (mesmo bloco de antes) â€”â€”â€”
  DB_HOST:   ${{ secrets.DB_HOST }}
  DB_PORT:   ${{ secrets.DB_PORT }}
  DB_USER:   ${{ secrets.DB_USER }}
  DB_PASS:   ${{ secrets.DB_PASSWORD }}
  DB_NAME:   ${{ secrets.DB_NAME }}
  DB_URL:    ${{ secrets.DB_URL }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ALGORITHM:  ${{ secrets.ALGORITHM }}
  ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    # âœ… A â€” debug interno do Actions (precisa estar cadastrado em Secrets mesmo com "false")
    env:
      ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}   # "true" p/ ativar
      ACTIONS_RUNNER_DEBUG: ${{ secrets.ACTIONS_RUNNER_DEBUG }} # idem
      TF_LOG: INFO        # âœ… C â€” faz Terraform cuspir mais detalhes
      TF_LOG_PATH: terraform.log

    steps:
    - uses: actions/checkout@v4

    # Credenciais AWS
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:            ${{ env.AWS_REGION }}

    - uses: aws-actions/amazon-ecr-login@v2
      with: { mask-password: true }

    # Build & Push
    - name: Build & Push Docker image
      id: build
      run: |
        set -exo pipefail   # âœ… B â€” mostra cada comando
        aws ecr describe-repositories --repository-names $ECR_REPO 2>/dev/null \
          || aws ecr create-repository --repository-name $ECR_REPO --image-tag-mutability MUTABLE
        IMAGE_URI=$(aws ecr describe-repositories --repository-names $ECR_REPO \
                    --query 'repositories[0].repositoryUri' --output text)
        echo "::group::Docker build"
        docker build --progress=plain -t $IMAGE_URI:${{ github.sha }} .
        echo "::endgroup::"
        docker push $IMAGE_URI:${{ github.sha }}
        echo "IMAGE_URI=$IMAGE_URI"          >> $GITHUB_ENV
        echo "APP_VERSION=${{ github.sha }}" >> $GITHUB_ENV
        docker images | grep customer || true   # lista imagem local

    # Dockerrun
    - name: Generate Dockerrun & ZIP
      run: |
        set -exo pipefail
        cat > Dockerrun.aws.json <<EOF
        {
          "AWSEBDockerrunVersion": "1",
          "Image": { "Name": "${IMAGE_URI}:${APP_VERSION}", "Update": "true" },
          "Ports": [ { "ContainerPort": "8000" } ]
        }
        EOF
        cat Dockerrun.aws.json             # imprime conteÃºdo
        zip -q deploy.zip Dockerrun.aws.json
        echo "ZIP_PATH=$(pwd)/deploy.zip" >> $GITHUB_ENV
        unzip -l deploy.zip               # lista arquivos no ZIP

    # Terraform
    - uses: hashicorp/setup-terraform@v3
      with: { terraform_version: 1.6.5 }

    - name: Terraform Init
      working-directory: infra
      run: |
        set -exo pipefail
        terraform init -input=false -upgrade

    # Importâ€¦
    - name: Importar recursos existentes
      working-directory: infra
      run: |
        set -exo pipefail
        # (mesmo script anteriorâ€¦)

    # Apply
    - name: Terraform Apply
      working-directory: infra
      run: |
        set -exo pipefail
        terraform apply -auto-approve -input=false \
          -var="app_version=${APP_VERSION}" \
          -var="artifact_zip=${ZIP_PATH}" \
          -var="db_host=${DB_HOST}" \
          -var="db_port=${DB_PORT}" \
          -var="db_user=${DB_USER}" \
          -var="db_password=${DB_PASS}" \
          -var="db_name=${DB_NAME}" \
          -var="db_url=${DB_URL}" \
          -var="secret_key=${SECRET_KEY}" \
          -var="algorithm=${ALGORITHM}" \
          -var="token_expire=${ACCESS_TOKEN_EXPIRE_MINUTES}"

    # âœ… D â€” se falhar, puxa eventos do EB
    - name: Dump EB events on failure
      if: failure()
      shell: bash
      run: |
        APP=customer-service
        ENV=$(aws elasticbeanstalk describe-environments --application-name $APP \
               --query 'Environments[0].EnvironmentName' --output text)
        echo "::group::Last 50 EB events"
        aws elasticbeanstalk describe-events \
          --environment-name "$ENV" --max-items 50 \
          --query 'Events[*].[EventDate,Severity,Message]' --output table
        echo "::endgroup::"

    # URL final
    - name: Show service URL
      working-directory: infra
      run: echo "ðŸŸ¢ URL -> $(terraform output -raw service_url)"

    # Opcional â€” publica o terraform.log como artefato
    - name: Upload terraform.log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-log
        path: infra/terraform.log
