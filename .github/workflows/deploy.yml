name: Build & Push Docker (customer-service)

on:
  push:
    branches: [main, master]

env:
  AWS_REGION: us-east-1
  ECR_REPO:   customer-service     # mesmo nome do Terraform

jobs:
  push-image:
    runs-on: ubuntu-latest
    steps:
    # 0) Checa o cÃ³digo
    - uses: actions/checkout@v4

    # 1) Credenciais AWS
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:            ${{ env.AWS_REGION }}

    # 2) Login no ECR
    - uses: aws-actions/amazon-ecr-login@v2
      with: { mask-password: true }

    # 3) Build & Push
    - name: Build & Push image
      run: |
        set -euo pipefail
        # Descobre a URI do repositÃ³rio
        IMAGE_URI=$(aws ecr describe-repositories \
                      --repository-names $ECR_REPO \
                      --query 'repositories[0].repositoryUri' \
                      --output text)
        # Cria o repositÃ³rio se alguÃ©m apagou sem passar pelo Terraform
        if [ -z "$IMAGE_URI" ]; then
          aws ecr create-repository --repository-name $ECR_REPO --image-tag-mutability MUTABLE
          IMAGE_URI=$(aws ecr describe-repositories \
                        --repository-names $ECR_REPO \
                        --query 'repositories[0].repositoryUri' \
                        --output text)
        fi

        # Tag = SHA do commit
        TAG=${{ github.sha }}

        echo "::group::Docker build"
        docker build --progress=plain -t $IMAGE_URI:$TAG .
        echo "::endgroup::"

        docker push $IMAGE_URI:$TAG
        echo "ðŸ“¦  Pushed => $IMAGE_URI:$TAG"
